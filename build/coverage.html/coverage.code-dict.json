{"/home/travis/build/npmtest/node-npmtest-vtop/test.js":"/* istanbul instrument in package npmtest_vtop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vtop/lib.npmtest_vtop.js":"/* istanbul instrument in package npmtest_vtop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vtop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vtop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vtop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vtop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vtop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vtop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vtop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vtop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vtop.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vtop.__dirname + '/lib.npmtest_vtop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vtop/node_modules/vtop/app.js":"'use strict'\n\nconst App = ((() => {\n  // Load in required libs\n  const Canvas = require('drawille')\n  const blessed = require('blessed')\n  const os = require('os')\n  const cli = require('commander')\n  const upgrade = require('./upgrade.js')\n  const VERSION = require('./package.json').version\n  const childProcess = require('child_process')\n  const glob = require('glob')\n  const path = require('path')\n  let themes = ''\n  let program = blessed.program()\n\n  const files = glob.sync(path.join(__dirname, 'themes', '*.json'))\n  for (var i = 0; i < files.length; i++) {\n    let themeName = files[i].replace(path.join(__dirname, 'themes') + path.sep, '').replace('.json', '')\n    themes += `${themeName}|`\n  }\n  themes = themes.slice(0, -1)\n\n  // Set up the commander instance and add the required options\n  cli\n    .option('-t, --theme  [name]', `set the vtop theme [${themes}]`, 'parallax')\n    .option('--quit-after [seconds]', 'Quits vtop after interval', '0')\n    .version(VERSION)\n    .parse(process.argv)\n\n  /**\n   * Instance of blessed screen, and the charts object\n   */\n  let screen\n  const charts = []\n  let loadedTheme\n  const intervals = []\n\n  let upgradeNotice = false\n  let disableTableUpdate = false\n  let disableTableUpdateTimeout = setTimeout(() => {}, 0)\n\n  let graphScale = 1\n\n  // Private variables\n\n  /**\n   * This is the number of data points drawn\n   * @type {Number}\n   */\n  let position = 0\n\n  const size = {\n    pixel: {\n      width: 0,\n      height: 0\n    },\n    character: {\n      width: 0,\n      height: 0\n    }\n  }\n\n  // @todo: move this into charts array\n  // This is an instance of Blessed Box\n  let graph\n\n  let graph2\n  let processList\n  let processListSelection\n\n  // Private functions\n\n  /**\n   * Draw header\n   * @param  {string} left  This is the text to go on the left\n   * @param  {string} right This is the text for the right\n   * @return {void}\n   */\n  const drawHeader = () => {\n    let headerText\n    let headerTextNoTags\n    if (upgradeNotice) {\n      upgradeNotice = `${upgradeNotice}`\n      headerText = ` {bold}vtop{/bold}{white-fg} for ${os.hostname()} {red-bg} Press 'u' to upgrade to v${upgradeNotice} {/red-bg}{/white-fg}`\n      headerTextNoTags = ` vtop for ${os.hostname()}  Press 'u' to upgrade to v${upgradeNotice} `\n    } else {\n      headerText = ` {bold}vtop{/bold}{white-fg} for ${os.hostname()} `\n      headerTextNoTags = ` vtop for ${os.hostname()} `\n    }\n\n    const header = blessed.text({\n      top: 'top',\n      left: 'left',\n      width: headerTextNoTags.length,\n      height: '1',\n      fg: loadedTheme.title.fg,\n      content: headerText,\n      tags: true\n    })\n    const date = blessed.text({\n      top: 'top',\n      right: 0,\n      width: 9,\n      height: '1',\n      align: 'right',\n      content: '',\n      tags: true\n    })\n    const loadAverage = blessed.text({\n      top: 'top',\n      height: '1',\n      align: 'center',\n      content: '',\n      tags: true,\n      left: Math.floor(program.cols / 2 - (28 / 2))\n    })\n    screen.append(header)\n    screen.append(date)\n    screen.append(loadAverage)\n\n    const zeroPad = input => (`0${input}`).slice(-2)\n\n    const updateTime = () => {\n      const time = new Date()\n      date.setContent(`${zeroPad(time.getHours())}:${zeroPad(time.getMinutes())}:${zeroPad(time.getSeconds())} `)\n      screen.render()\n    }\n\n    const updateLoadAverage = () => {\n      const avg = os.loadavg()\n      loadAverage.setContent(`Load Average: ${avg[0].toFixed(2)} ${avg[1].toFixed(2)} ${avg[2].toFixed(2)}`)\n      screen.render()\n    }\n\n    updateTime()\n    updateLoadAverage()\n    setInterval(updateTime, 1000)\n    setInterval(updateLoadAverage, 1000)\n  }\n\n  /**\n   * Draw the footer\n   *\n   * @todo This appears to break on some viewports\n   */\n  const drawFooter = () => {\n    const commands = {\n      'dd': 'Kill process',\n      'j': 'Down',\n      'k': 'Up',\n      'g': 'Jump to top',\n      'G': 'Jump to bottom',\n      'c': 'Sort by CPU',\n      'm': 'Sort by Mem'\n    }\n    let text = ''\n    for (const c in commands) {\n      const command = commands[c]\n      text += `  {white-bg}{black-fg}${c}{/black-fg}{/white-bg} ${command}`\n    }\n    text += '{|}http://parall.ax/vtop'\n    const footerRight = blessed.box({\n      width: '100%',\n      top: program.rows - 1,\n      tags: true,\n      fg: loadedTheme.footer.fg\n    })\n    footerRight.setContent(text)\n    screen.append(footerRight)\n  }\n\n  /**\n   * Repeats a string\n   * @var string The string to repeat\n   * @var integer The number of times to repeat\n   * @return {string} The repeated chars as a string.\n   */\n  const stringRepeat = (string, num) => {\n    if (num < 0) {\n      return ''\n    }\n    return new Array(num + 1).join(string)\n  }\n\n  /**\n   * This draws a chart\n   * @param  {int} chartKey The key of the chart.\n   * @return {string}       The text output to draw.\n   */\n  const drawChart = chartKey => {\n    const chart = charts[chartKey]\n    const c = chart.chart\n    c.clear()\n\n    if (!charts[chartKey].plugin.initialized) {\n      return false\n    }\n\n    const dataPointsToKeep = 5000\n\n    charts[chartKey].values[position] = charts[chartKey].plugin.currentValue\n\n    const computeValue = input => chart.height - Math.floor(((chart.height + 1) / 100) * input) - 1\n\n    if (position > dataPointsToKeep) {\n      delete charts[chartKey].values[position - dataPointsToKeep]\n    }\n\n    for (const pos in charts[chartKey].values) {\n      if (graphScale >= 1 || (graphScale < 1 && pos % (1 / graphScale) === 0)) {\n        const p = parseInt(pos, 10) + (chart.width - charts[chartKey].values.length)\n        // calculated x-value based on graphScale\n        const x = (p * graphScale) + ((1 - graphScale) * chart.width)\n\n        // draws top line of chart\n        if (p > 1 && computeValue(charts[chartKey].values[pos - 1]) > 0) {\n          c.set(x, computeValue(charts[chartKey].values[pos - 1]))\n        }\n\n        // Start deleting old data points to improve performance\n        // @todo: This is not be the best place to do this\n\n        // fills all area underneath top line\n        for (let y = computeValue(charts[chartKey].values[pos - 1]); y < chart.height; y++) {\n          if (graphScale > 1 && p > 0 && y > 0) {\n            const current = computeValue(charts[chartKey].values[pos - 1])\n            const next = computeValue(charts[chartKey].values[pos])\n            const diff = (next - current) / graphScale\n\n            // adds columns between data if graph is zoomed in, takes average where data is missing to make smooth curve\n            for (let i = 0; i < graphScale; i++) {\n              c.set(x + i, y + (diff * i))\n              for (let j = y + (diff * i); j < chart.height; j++) {\n                c.set(x + i, j)\n              }\n            }\n          } else if (graphScale <= 1) {\n            // magic number used to calculate when to draw a value onto the chart\n            // @TODO: Remove this?\n            // var allowedPValues = (charts[chartKey].values.length - ((graphScale * charts[chartKey].values.length) + 1)) * -1\n            c.set(x, y)\n          }\n        }\n      }\n    }\n\n    // Add percentage to top right of the chart by splicing it into the braille data\n    const textOutput = c.frame().split('\\n')\n    const percent = `   ${chart.plugin.currentValue}`\n    textOutput[0] = `${textOutput[0].slice(0, textOutput[0].length - 4)}{white-fg}${percent.slice(-3)}%{/white-fg}`\n\n    return textOutput.join('\\n')\n  }\n\n  /**\n   * Draws a table.\n   * @param  {int} chartKey The key of the chart.\n   * @return {string}       The text output to draw.\n   */\n  const drawTable = chartKey => {\n    const chart = charts[chartKey]\n    const columnLengths = {}\n    // Clone the column array\n    const columns = chart.plugin.columns.slice(0)\n    columns.reverse()\n    let removeColumn = false\n    const lastItem = columns[columns.length - 1]\n\n    const minimumWidth = 12\n    let padding = 1\n\n    if (chart.width > 50) {\n      padding = 2\n    }\n\n    if (chart.width > 80) {\n      padding = 3\n    }\n    // Keep trying to reduce the number of columns\n    do {\n      let totalUsed = 0\n      let firstLength = 0\n      // var totalColumns = columns.length\n      // Allocate space for each column in reverse order\n      for (const column in columns) {\n        const item = columns[column]\n        i++\n        // If on the last column (actually first because of array order)\n        // then use up all the available space\n        if (item === lastItem) {\n          columnLengths[item] = chart.width - totalUsed\n          firstLength = columnLengths[item]\n        } else {\n          columnLengths[item] = item.length + padding\n        }\n        totalUsed += columnLengths[item]\n      }\n      if (firstLength < minimumWidth && columns.length > 1) {\n        totalUsed = 0\n        columns.shift()\n        removeColumn = true\n      } else {\n        removeColumn = false\n      }\n    } while (removeColumn)\n\n    // And back again\n    columns.reverse()\n    let titleOutput = '{bold}'\n    for (const headerColumn in columns) {\n      var colText = ` ${columns[headerColumn]}`\n      titleOutput += (colText + stringRepeat(' ', columnLengths[columns[headerColumn]] - colText.length))\n    }\n    titleOutput += '{/bold}' + '\\n'\n\n    const bodyOutput = []\n    for (const row in chart.plugin.currentValue) {\n      const currentRow = chart.plugin.currentValue[row]\n      let rowText = ''\n      for (const bodyColumn in columns) {\n        let colText = ` ${currentRow[columns[bodyColumn]]}`\n        rowText += (colText + stringRepeat(' ', columnLengths[columns[bodyColumn]] - colText.length)).slice(0, columnLengths[columns[bodyColumn]])\n      }\n      bodyOutput.push(rowText)\n    }\n    return {\n      title: titleOutput,\n      body: bodyOutput,\n      processWidth: columnLengths[columns[0]]\n    }\n  }\n\n  // This is set to the current items displayed\n  let currentItems = []\n  let processWidth = 0\n  /**\n   * Overall draw function, this should poll and draw results of\n   * the loaded sensors.\n   */\n  const draw = () => {\n    position++\n\n    const chartKey = 0\n    graph.setContent(drawChart(chartKey))\n    graph2.setContent(drawChart(chartKey + 1))\n\n    if (!disableTableUpdate) {\n      const table = drawTable(chartKey + 2)\n      processList.setContent(table.title)\n\n      // If we keep the stat numbers the same immediately, then update them\n      // after, the focus will follow. This is a hack.\n\n      const existingStats = {}\n      // Slice the start process off, then store the full stat,\n      // so we can inject the same stat onto the new order for a brief render\n      // cycle.\n      for (var stat in currentItems) {\n        var thisStat = currentItems[stat]\n        existingStats[thisStat.slice(0, table.processWidth)] = thisStat\n      }\n      processWidth = table.processWidth\n      // Smush on to new stats\n      const tempStats = []\n      for (let stat in table.body) {\n        let thisStat = table.body[stat]\n        tempStats.push(existingStats[thisStat.slice(0, table.processWidth)])\n      }\n      // Move cursor position with temp stats\n      // processListSelection.setItems(tempStats);\n\n      // Update the numbers\n      processListSelection.setItems(table.body)\n\n      processListSelection.focus()\n\n      currentItems = table.body\n    }\n\n    screen.render()\n  }\n\n  // Public function (just the entry point)\n  return {\n\n    init () {\n      let theme\n      if (typeof process.theme !== 'undefined') {\n        theme = process.theme\n      } else {\n        theme = cli.theme\n      }\n      /**\n       * Quits running vtop after so many seconds\n       * This is mainly for perf testing.\n       */\n      if (cli['quitAfter'] !== '0') {\n        setTimeout(() => {\n          process.exit(0)\n        }, parseInt(cli['quitAfter'], 10) * 1000)\n      }\n\n      try {\n        loadedTheme = require(`./themes/${theme}.json`)\n      } catch (e) {\n        console.log(`The theme '${theme}' does not exist.`)\n        process.exit(1)\n      }\n      // Create a screen object.\n      screen = blessed.screen()\n\n      // Configure 'q', esc, Ctrl+C for quit\n      let upgrading = false\n\n      const doCheck = () => {\n        upgrade.check(v => {\n          upgradeNotice = v\n          drawHeader()\n        })\n      }\n\n      doCheck()\n      // Check for updates every 5 minutes\n      // setInterval(doCheck, 300000);\n\n      let lastKey = ''\n\n      screen.on('keypress', (ch, key) => {\n        if (key === 'up' || key === 'down' || key === 'k' || key === 'j') {\n          // Disable table updates for half a second\n          disableTableUpdate = true\n          clearTimeout(disableTableUpdateTimeout)\n          disableTableUpdateTimeout = setTimeout(() => {\n            disableTableUpdate = false\n          }, 1000)\n        }\n\n        if (\n          upgrading === false &&\n          (\n            key.name === 'q' ||\n            key.name === 'escape' ||\n            (key.name === 'c' && key.ctrl === true)\n          )\n        ) {\n          return process.exit(0)\n        }\n        // dd killall\n        // @todo: Factor this out\n        if (lastKey === 'd' && key.name === 'd') {\n          let selectedProcess = processListSelection.getItem(processListSelection.selected).content\n          selectedProcess = selectedProcess.slice(0, processWidth).trim()\n\n          childProcess.exec(`killall \"${selectedProcess}\"`, () => {})\n        }\n\n        if (key.name === 'c' && charts[2].plugin.sort !== 'cpu') {\n          charts[2].plugin.sort = 'cpu'\n          charts[2].plugin.poll()\n          setTimeout(() => {\n            processListSelection.select(0)\n          }, 200)\n        }\n        if (key.name === 'm' && charts[2].plugin.sort !== 'mem') {\n          charts[2].plugin.sort = 'mem'\n          charts[2].plugin.poll()\n          setTimeout(() => {\n            processListSelection.select(0)\n          }, 200)\n        }\n        lastKey = key.name\n\n        if (key.name === 'u' && upgrading === false) {\n          upgrading = true\n          // Clear all intervals\n          for (const interval in intervals) {\n            clearInterval(intervals[interval])\n          }\n          processListSelection.detach()\n          program = blessed.program()\n          program.clear()\n          program.disableMouse()\n          program.showCursor()\n          program.normalBuffer()\n\n          // @todo: show changelog  AND  smush existing data into it :D\n          upgrade.install('vtop', [\n            {\n              'theme': theme\n            }\n          ])\n        }\n\n        if ((key.name === 'left' || key.name === 'h') && graphScale < 8) {\n          graphScale *= 2\n        } else if ((key.name === 'right' || key.name === 'l') && graphScale > 0.125) {\n          graphScale /= 2\n        }\n      })\n\n      drawHeader()\n\n      // setInterval(drawHeader, 1000);\n      drawFooter()\n\n      graph = blessed.box({\n        top: 1,\n        left: 'left',\n        width: '100%',\n        height: '50%',\n        content: '',\n        fg: loadedTheme.chart.fg,\n        tags: true,\n        border: loadedTheme.chart.border\n      })\n\n      screen.append(graph)\n\n      let graph2appended = false\n\n      const createBottom = () => {\n        if (graph2appended) {\n          screen.remove(graph2)\n          screen.remove(processList)\n        }\n        graph2appended = true\n        graph2 = blessed.box({\n          top: graph.height + 1,\n          left: 'left',\n          width: '50%',\n          height: graph.height - 2,\n          content: '',\n          fg: loadedTheme.chart.fg,\n          tags: true,\n          border: loadedTheme.chart.border\n        })\n        screen.append(graph2)\n\n        processList = blessed.box({\n          top: graph.height + 1,\n          left: '50%',\n          width: screen.width - graph2.width,\n          height: graph.height - 2,\n          keys: true,\n          mouse: true,\n          fg: loadedTheme.table.fg,\n          tags: true,\n          border: loadedTheme.table.border\n        })\n        screen.append(processList)\n\n        processListSelection = blessed.list({\n          height: processList.height - 3,\n          top: 1,\n          width: processList.width - 2,\n          left: 0,\n          keys: true,\n          vi: true,\n          search (jump) {\n            // @TODO\n            // jump('string of thing to jump to');\n          },\n          style: loadedTheme.table.items,\n          mouse: true\n        })\n        processList.append(processListSelection)\n        processListSelection.focus()\n        screen.render()\n      }\n\n      screen.on('resize', () => {\n        createBottom()\n      })\n      createBottom()\n\n      screen.append(graph)\n      screen.append(processList)\n\n      // Render the screen.\n      screen.render()\n\n      const setupCharts = () => {\n        size.pixel.width = (graph.width - 2) * 2\n        size.pixel.height = (graph.height - 2) * 4\n\n        const plugins = ['cpu', 'memory', 'process']\n\n        for (const plugin in plugins) {\n          let width\n          let height\n          let currentCanvas\n          // @todo Refactor this\n          switch (plugins[plugin]) {\n            case 'cpu':\n              width = (graph.width - 3) * 2\n              height = (graph.height - 2) * 4\n              currentCanvas = new Canvas(width, height)\n              break\n            case 'memory':\n              width = (graph2.width - 3) * 2\n              height = ((graph2.height - 2) * 4)\n              currentCanvas = new Canvas(width, height)\n              break\n            case 'process':\n              width = processList.width - 3\n              height = processList.height - 2\n              break\n          }\n\n          // If we're reconfiguring a plugin, then preserve the already recorded values\n          let values\n          if (typeof charts[plugin] !== 'undefined' && typeof charts[plugin].values !== 'undefined') {\n            values = charts[plugin].values\n          } else {\n            values = []\n          }\n          charts[plugin] = {\n            chart: currentCanvas,\n            values,\n            plugin: require(`./sensors/${plugins[plugin]}.js`),\n            width,\n            height\n          }\n          charts[plugin].plugin.poll()\n        }\n        // @TODO Make this less hard-codey\n        graph.setLabel(` ${charts[0].plugin.title} `)\n        graph2.setLabel(` ${charts[1].plugin.title} `)\n        processList.setLabel(` ${charts[2].plugin.title} `)\n      }\n\n      setupCharts()\n      screen.on('resize', setupCharts)\n      intervals.push(setInterval(draw, 100))\n\n      // @todo Make this more sexy\n      intervals.push(setInterval(charts[0].plugin.poll, charts[0].plugin.interval))\n      intervals.push(setInterval(charts[1].plugin.poll, charts[1].plugin.interval))\n      intervals.push(setInterval(charts[2].plugin.poll, charts[2].plugin.interval))\n    }\n  }\n})())\n\nApp.init()\n","/home/travis/build/npmtest/node-npmtest-vtop/node_modules/vtop/upgrade.js":"/**\n * npm package updater\n *\n * @copyright 2014 James HAll\n *\n * This will detect if a package needs and update,\n * and also update it\n */\nvar safeEval = require('safe-eval')\n\nvar upgrade = (function () {\n  return {\n    /**\n     * Should call the callback with a new version number, or false\n     */\n    check: function (callback) {\n      try {\n        var current = require('./package.json').version\n\n        var childProcess = require('child_process')\n        childProcess.exec('npm --color=false info vtop', function (error, stdout, stderr) {\n          if (error) {\n            console.error(error)\n          }\n          var output = safeEval('(' + stdout + ')')\n          if (output['dist-tags']['latest'] !== current) {\n            callback(output['dist-tags']['latest'])\n          } else {\n            callback(false)\n          }\n        })\n      } catch (e) {\n        callback(false)\n      }\n    },\n    /**\n     * This will install the update and relaunch\n     */\n    install: function (packageName, vars) {\n      var sudo = require('sudo')\n      console.log('')\n      console.log('Installing vtop update...')\n      console.log('')\n      console.log(' ** You will need to enter your password to upgrade ** ')\n      console.log('')\n\n      var args = ['npm', 'install', '-g', 'vtop']\n      console.log(args.join(' '))\n\n      var options = {\n        cachePassword: false,\n        prompt: 'Password:',\n        spawnOptions: { stdio: 'inherit' }\n      }\n      var child = sudo(args, options)\n\n      var path = false\n      child.stdout.on('data', function (data) {\n        console.log(data.toString())\n\n        if (data.toString().indexOf('vtop.js') !== -1) {\n          path = data.toString().trim().split(' ')[2]\n        }\n      })\n      child.stderr.on('data', function (data) {\n        console.log(data.toString())\n      })\n\n      child.on('close', function () {\n        for (var file in require.cache) {\n          delete require.cache[file]\n        }\n        console.log('Finished updating. Clearing cache and relaunching...')\n        setTimeout(function () {\n          for (var v in vars) {\n            process[v] = vars[v]\n          }\n          require(path)\n        }, 1000)\n      })\n    }\n  }\n}())\n\nmodule.exports = upgrade\n","/home/travis/build/npmtest/node-npmtest-vtop/node_modules/vtop/sensors/cpu.js":"'use strict'\n/**\n * CPU Usage sensor\n *\n * (c) 2014 James Hall\n */\n'use strict'\n\nconst os = require('os-utils')\nconst plugin = {\n  /**\n   * This appears in the title of the graph\n   */\n  title: 'CPU Usage',\n  /**\n   * The type of sensor\n   * @type {String}\n   */\n  type: 'chart',\n  /**\n   * The default interval time in ms that this plugin should be polled.\n   * More costly benchmarks should be polled less frequently.\n   */\n  interval: 200,\n\n  initialized: false,\n\n  currentValue: 0,\n  /**\n   * Grab the current value, from 0-100\n   */\n  poll () {\n    os.cpuUsage(v => {\n      plugin.currentValue = (Math.floor(v * 100))\n      plugin.initialized = true\n    })\n  }\n}\n\nmodule.exports = exports = plugin\n","/home/travis/build/npmtest/node-npmtest-vtop/node_modules/vtop/sensors/memory.js":"/**\n * Memory Usage sensor\n *\n * (c) 2014 James Hall\n */\n'use strict'\n\nconst os = require('os-utils')\nconst _os = require('os')\nconst child = require('child_process')\n\nconst plugin = {\n  /**\n   * This appears in the title of the graph\n   */\n  title: 'Memory Usage',\n  /**\n   * The type of sensor\n   * @type {String}\n   */\n  type: 'chart',\n  /**\n   * The default interval time in ms that this plugin should be polled.\n   * More costly benchmarks should be polled less frequently.\n   */\n  interval: 200,\n\n  initialized: false,\n\n  currentValue: 0,\n\n  isLinux: _os.platform().includes('linux'),\n\n  /**\n   * Grab the current value, from 0-100\n   */\n  poll () {\n    const computeUsage = (used, total) => Math.round(100 * (used / total))\n\n    if (plugin.isLinux) {\n      child.exec('free -m', (err, stdout, stderr) => {\n        if (err) {\n          console.error(err)\n        }\n        const data = stdout.split('\\n')[1].replace(/[\\s\\n\\r]+/g, ' ').split(' ')\n        const used = parseInt(data[2], 10)\n        const total = parseInt(data[1], 10)\n        plugin.currentValue = computeUsage(used, total)\n      })\n    } else {\n      plugin.currentValue = Math.round((1 - os.freememPercentage()) * 100)\n    }\n\n    plugin.initialized = true\n  }\n}\n\nmodule.exports = exports = plugin\n","/home/travis/build/npmtest/node-npmtest-vtop/node_modules/vtop/sensors/process.js":"/**\n *\n * Process monitor sensor\n *\n * (c) 2014 James Hall\n */\n'use strict'\n\nconst os = require('os')\nconst childProcess = require('child_process')\n\nconst plugin = {\n  /**\n   * * This appears in the title of the graph\n   */\n  title: 'Process List',\n  description: `\n    This returns a process list, grouped by executable name. CPU % is divided by the number of cores.\n    100% CPU Usage is all cores being maxed out. Unlike other tools that define the maximum as 800% for 8 cores for example.`,\n  /**\n   * The type of sensor\n   * @type {String}\n   */\n  type: 'table',\n  /**\n   * The default interval time in ms that this plugin should be polled.\n   * More costly benchmarks should be polled less frequently.\n   */\n  interval: 2000,\n\n  initialized: false,\n\n  sort: 'cpu',\n\n  columns: ['Command', 'CPU %', 'Count', 'Memory %'],\n  currentValue: [{\n    'Command': 'Google Chrome',\n    'Count': '4',\n    'CPU %': '0.4',\n    'Memory %': '1'\n  }, {\n    'Command': 'Sublime Text 2',\n    'Count': '1',\n    'CPU %': '0.1',\n    'Memory': '5'\n  }],\n\n  /**\n   * Grab the current value for the table\n   */\n  poll () {\n    const stats = {}\n    // @todo If you can think of a better way of getting process stats,\n    // then please feel free to send me a pull request. This is version 0.1\n    // and needs some love.\n    childProcess.exec('ps -ewwwo %cpu,%mem,comm', (error, stdout, stderr) => {\n      if (error) {\n        console.error(error)\n      }\n      const lines = stdout.split('\\n')\n      // Ditch the first line\n      lines[0] = ''\n      for (const line in lines) {\n        const currentLine = lines[line].trim().replace('  ', ' ')\n        const words = currentLine.split(' ')\n        if (typeof words[0] !== 'undefined' && typeof words[1] !== 'undefined') {\n          const cpu = words[0].replace(',', '.')\n          const mem = words[1].replace(',', '.')\n          const offset = cpu.length + mem.length + 2\n          let comm = currentLine.slice(offset)\n          // If we're on Mac then remove the path\n          if (/^darwin/.test(process.platform)) {\n            comm = comm.split('/')\n            comm = comm[comm.length - 1]\n          } else {\n            // Otherwise assume linux and remove the unnecessary /1 info like\n            // you get on kworker\n            comm = comm.split('/')\n            comm = comm[0]\n          }\n          // If already exists, then add them together\n          if (typeof stats[comm] !== 'undefined') {\n            stats[comm] = {\n              cpu: parseFloat(stats[comm].cpu, 10) + parseFloat(cpu),\n              mem: parseFloat(stats[comm].mem, 10) + parseFloat(mem),\n              comm,\n              count: parseInt(stats[comm].count, 10) + 1\n            }\n          } else {\n            stats[comm] = {\n              cpu,\n              mem,\n              comm,\n              count: 1\n            }\n          }\n        }\n      }\n      const statsArray = []\n      for (const stat in stats) {\n        // Divide by number of CPU cores\n        const cpuRounded = parseFloat(stats[stat].cpu / os.cpus().length).toFixed(1)\n        const memRounded = parseFloat(stats[stat].mem).toFixed(1)\n        statsArray.push({\n          'Command': stats[stat].comm,\n          'Count': stats[stat].count,\n          'CPU %': cpuRounded,\n          'Memory %': memRounded,\n          'cpu': stats[stat].cpu,\n          'mem': stats[stat].mem // exact cpu for comparison\n        })\n      }\n      statsArray.sort((a, b) => parseFloat(b[plugin.sort]) - parseFloat(a[plugin.sort]))\n\n      plugin.currentValue = statsArray\n      plugin.initialized = true\n    })\n  }\n}\nmodule.exports = exports = plugin\n"}